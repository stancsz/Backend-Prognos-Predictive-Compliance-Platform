openapi: 3.0.0
info:
  title: Prognos API
  version: "0.1.0"
  description: API used by the Prognos frontend. Minimal spec covering health, readiness, uploads, frameworks, mappings, and project summary.
servers:
  - url: http://localhost:4000
    description: Local development server
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'

  /ready:
    get:
      summary: Readiness probe
      responses:
        '200':
          description: Readiness status including DB and S3 availability
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Readiness'

  /uploads:
    post:
      summary: Create an upload (returns pre-signed URL or metadata)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        '200':
          description: Upload metadata or presigned URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /frameworks:
    get:
      summary: List available frameworks
      responses:
        '200':
          description: Framework list
          content:
            application/json:
              schema:
                type: object
                properties:
                  frameworks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Framework'

  /frameworks/{id}/controls:
    get:
      summary: Get controls for a framework
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Controls list
          content:
            application/json:
              schema:
                type: object
                properties:
                  controls:
                    type: array
                    items:
                      $ref: '#/components/schemas/Control'
        '404':
          description: Framework not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mappings:
    post:
      summary: Create a mapping between evidence and a control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingRequest'
      responses:
        '200':
          description: Mapping created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}/summary:
    get:
      summary: Project summary (counts)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Summary for a project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        '400':
          description: Missing or invalid project id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
          example: ok
        db:
          type: boolean
          example: false

    Readiness:
      type: object
      properties:
        ready:
          type: boolean
          example: true
        db:
          type: boolean
          example: false
        s3:
          type: boolean
          example: false
        bucket:
          type: string
          example: local-minio-bucket

    UploadRequest:
      type: object
      required:
        - filename
        - projectId
      properties:
        filename:
          type: string
          example: sample.pdf
        projectId:
          type: string
          example: project-123
        contentType:
          type: string
          example: application/pdf

    UploadResponse:
      type: object
      properties:
        uploadId:
          type: string
          example: a1b2c3d4e5f6
        url:
          type: string
          nullable: true
          example: https://minio.local:9000/local-minio-bucket/evidence/...
        objectKey:
          type: string
          example: evidence/project-123/a1b2c3/sample.pdf

    Framework:
      type: object
      properties:
        id:
          type: string
          example: soc2
        name:
          type: string
          example: SOC 2
        version:
          type: string
          example: 1.0
        description:
          type: string
          example: "SOC 2 control framework"
        controls:
          type: array
          items:
            $ref: '#/components/schemas/Control'

    Control:
      type: object
      properties:
        id:
          type: string
          example: control-1
        title:
          type: string
          example: "Access control"
        description:
          type: string
          example: "Ensure only authorized users have access"

    MappingRequest:
      type: object
      required:
        - projectId
        - evidenceId
        - controlId
      properties:
        projectId:
          type: string
          example: project-123
        evidenceId:
          type: string
          example: evi-abc-123
        controlId:
          type: string
          example: control-1
        notes:
          type: string
          example: "Verified evidence matches control requirement"

    MappingResponse:
      type: object
      properties:
        mappingId:
          type: string
          example: m-12345
        createdAt:
          type: string
          format: date-time
          example: "2025-10-26T00:00:00.000Z"

    ProjectSummary:
      type: object
      properties:
        projectId:
          type: string
          example: project-123
        totalEvidence:
          type: integer
          format: int32
          example: 5
        indexedEvidence:
          type: integer
          format: int32
          example: 2
        mappingsCount:
          type: integer
          format: int32
          example: 3
        controlsTotal:
          type: integer
          format: int32
          example: 50
        controlsCovered:
          type: integer
          format: int32
          example: 8
        timestamp:
          type: string
          format: date-time
          example: "2025-10-26T00:00:00Z"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "not_found"
