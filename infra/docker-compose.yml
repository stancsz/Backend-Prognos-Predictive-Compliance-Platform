services:
  postgres:
    image: postgres:15-alpine
    container_name: plts_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: plts_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: plts_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: plts_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"

  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile.api
    container_name: plts_api
    depends_on:
      - postgres
      - minio
    environment:
      PORT: "4000"
      DATABASE_URL: "postgres://devuser:devpass@postgres:5432/plts_dev"
      S3_BUCKET: "local-minio-bucket"
      AWS_ENDPOINT: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    container_name: plts_worker
    depends_on:
      - postgres
      - minio
      - api
    environment:
      DATABASE_URL: "postgres://devuser:devpass@postgres:5432/plts_dev"
      S3_BUCKET: "local-minio-bucket"
      AWS_ENDPOINT: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      WORKER_POLL_MS: "2000"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'echo ok'"]
      interval: 10s
      timeout: 5s
      retries: 5

  demo-runner:
    build:
      context: ..
      dockerfile: infra/Dockerfile.demo
    container_name: plts_demo
    depends_on:
      - api
      - postgres
    environment:
      API_URL: "http://api:4000"
      DATABASE_URL: "postgres://devuser:devpass@postgres:5432/plts_dev"
    restart: "no"

networks:
  default:
    name: plts_dev_network

volumes:
  postgres_data:
  minio_data:
